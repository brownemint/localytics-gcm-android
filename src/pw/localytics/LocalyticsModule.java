/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package pw.localytics;

import java.util.HashMap;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.content.Intent;

import com.localytics.android.*;

@Kroll.module(name="Localytics", id="pw.localytics")
public class LocalyticsModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "LocalyticsModule";

	private LocalyticsSession localyticsSession;
	
	public LocalyticsModule()
	{
		super();
	}
	
	/*
	 * Application Lifecycle
	 */
	
	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) // was public static void!
	{
		Log.d(TAG, "inside onAppCreate");
	}
	
	/*
	 * Localytics Methods
	 */
	
	/**
	 * Function to init a Localytics Session
	 */
	@Kroll.method
	public void initSession( String appKey )
	{
		// localyticsSession = new LocalyticsSession( TiApplication.getInstance() );
		this.localyticsSession = new LocalyticsSession( TiApplication.getInstance().getApplicationContext(), appKey );
		this.localyticsSession.open();
		this.localyticsSession.upload();
	}
	
	/**
	 * Function to pause the current session
	 */
//	@Override
//	public void onPause(Activity activity)
//	{
//		this.pauseSession();
//	}
	
	@Kroll.method
	public void pauseSession()
	{
		Log.d(TAG, "Session Paused");
		this.localyticsSession.close();
	    this.localyticsSession.upload();
	}
	
	/**
	 * Function to resume the current session
	 */
//	@Override
//	public void onResume(Activity activity)
//	{
//		this.resumeSession();
//	}
	
	@Kroll.method
	public void resumeSession()
	{
		Log.d(TAG, "Session Resumed");
		this.localyticsSession.open();
	    
		TiApplication appContext = TiApplication.getInstance();
		Activity activity = appContext.getCurrentActivity();
	    this.localyticsSession.handlePushReceived(activity.getIntent());
	    
	    this.localyticsSession.upload();
	}
	
	/**
	 * Initialise Localytics and Register for Push Notifications
	 * @param projNumber String Number for registering for Push Notifications obtained when registered GCM
	 */
	@Kroll.method
	public void registerForPush( String projNumber )
	{
		Log.d(TAG, "Register For Push");
		this.localyticsSession.registerPush(projNumber);
		
		TiApplication appContext = TiApplication.getInstance();
		Activity activity = appContext.getCurrentActivity();
		this.localyticsSession.handlePushReceived(activity.getIntent());
		
		this.localyticsSession.upload();
	}
	
	/**
	 * Log an Event
	 * @param eventName String event name to log
	 * @param params HashMap Dictionary of objects to log (optional)
	 */
	@Kroll.method
	public void logEvent ( String eventName, HashMap params )
	{	
		//Check event name is not null
		if ( eventName == null || eventName.length() == 0 ) {
			Log.e(TAG, "Please specify an event name");
			return;
		}
		
		Log.d(TAG, "Logging Event: "+eventName);
		
		//Ensure Params are available
		if( params != null ){ this.localyticsSession.tagEvent(eventName, params); }
		else { this.localyticsSession.tagEvent(eventName); }
		
		this.localyticsSession.upload();
	}
	
	/**
	 * Log a visit to a screen
	 * @param screenName String name of screen to log
	 */
	@Kroll.method
	public void logScreen ( String screenName )
	{
		//Check screen name is not null
		if ( screenName == null || screenName.length() == 0 ) {
			Log.e(TAG, "Please specify a screen name");
			return;
		}
		
		Log.d(TAG, "Logging Screen: "+screenName);
		this.localyticsSession.tagScreen( screenName );
		this.localyticsSession.upload();
	}
}

